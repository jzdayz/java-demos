plugins {
    id 'java'
    id 'groovy'
    id 'net.ltgt.apt' version '0.15' apply false
    id "org.jetbrains.kotlin.jvm" version "1.3.72" apply false
    id 'com.google.protobuf' version '0.8.8' apply false
    id 'org.springframework.boot' version '2.2.6.RELEASE' apply false
}

subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'io.spring.dependency-management'

    group 'io.github.jzdayz'
    version '0.0.1'

    def cloud = [
            'spring-cloud-config-server',
            'spring-cloud-config-client'
    ]
    def boot = [
            /*'spring-boot-test', */
            'spring-cloud-config-server',
            'spring-cloud-config-client',
            'spring-webflux',
            'spring-webmvc',
            'spring-cloud-alibaba-discovery'
    ]

    repositories {
        mavenCentral()
        jcenter()
    }

    ext {
        //noinspection SpellCheckingInspection
        set('springCloudVersion', "Hoxton.SR4")
        set('springCloudAlibabaVersion', "2.2.1.RELEASE")
    }

    dependencies {
        implementation 'com.google.guava:guava:29.0-jre'
        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        implementation 'org.codehaus.groovy:groovy:2.5.9'
        implementation "org.jetbrains.kotlin:kotlin-stdlib"
    }

    dependencyManagement {
        imports {
            //noinspection UnnecessaryQualifiedReference
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
        }
    }

    if (boot.contains(project.name)) {
        apply plugin: 'org.springframework.boot'
        if (cloud.contains(project.name)) {

        }
    }

    configurations {
        compileClasspath.resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                if (Objects.equals(details.getRequested().module.toString(), 'com.google.guava:guava')) {
                    details.useVersion '29.0-jre'
                }
                if (Objects.equals(details.getRequested().module.toString(), 'log4j:log4j')) {
                    details.useVersion '1.2.17'
                }
            }
        }
    }
}

allprojects {
    compileJava {
        options.compilerArgs << '-XDignore.symbol.file'
        options.fork = true
        options.forkOptions.executable = 'javac'
    }
}
