plugins {
    id 'java'
    id 'groovy'
    id "org.jetbrains.kotlin.jvm" version "1.3.72" apply false
    id 'org.springframework.boot' version '2.2.6.RELEASE' apply false
}

subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'io.spring.dependency-management'

    group 'io.github.jzdayz'
    version '0.0.1'

    def cloud = ['spring-cloud-config-server','spring-cloud-config-client']

    repositories {
        mavenCentral()
        jcenter()
    }

    ext {
        set('springCloudVersion', "Hoxton.SR4")
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        implementation 'org.codehaus.groovy:groovy:2.5.9'
        implementation "org.jetbrains.kotlin:kotlin-stdlib"
    }

    // ==============================================================================
    if (Objects.equals(project.name,"simple")){
        dependencies {
            implementation 'org.jooq:jooq:3.13.2'
            implementation 'org.jooq:jooq-meta:3.13.2'
            implementation 'org.jooq:jooq-codegen:3.13.2'
            implementation 'org.springframework:spring-jdbc:5.2.6.RELEASE'
            implementation 'com.alibaba:fastjson:1.2.68'
            implementation 'com.netflix.conductor:conductor-client:2.26.1'
            implementation 'com.github.vmg.protogen:protogen-annotations:1.0.0'
            implementation 'org.apache.zookeeper:zookeeper:3.6.1'
            implementation 'mysql:mysql-connector-java:5.1.49'
            implementation 'com.alibaba:QLExpress:3.2.0'
            implementation 'org.apache.commons:commons-vfs2:2.6.0'
            implementation 'com.jcraft:jsch:0.1.55'
            implementation 'commons-codec:commons-codec:1.14'
            implementation 'com.google.guava:guava:29.0-jre'
            implementation 'org.apache.commons:commons-collections4:4.4'
            implementation 'net.java.dev.jna:jna:5.5.0'
            implementation 'org.jooq:jool-java-8:0.9.14'
            implementation 'io.atlassian.fugue:fugue:4.7.1'
            implementation 'org.springframework.boot:spring-boot'
        }

        dependencyManagement {
            imports {
                mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            }
        }
    }

    if (Objects.equals(project.name,"web")){

        apply plugin: 'org.springframework.boot'

        dependencies {
            implementation 'com.github.xiaoymin:knife4j-spring-boot-starter:2.0.2'
            implementation 'org.springframework.boot:spring-boot-starter-web'
        }

        dependencyManagement {
            imports {
                mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            }
        }
    }

    if (cloud.contains(project.name)){

        apply plugin: 'org.springframework.boot'

        dependencyManagement {
            imports {
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            }
        }

        if (Objects.equals(project.name,"spring-cloud-config-client")){

            dependencies {
                implementation 'org.springframework.boot:spring-boot-starter-actuator'
                implementation 'org.springframework.boot:spring-boot-starter-web'
                implementation 'org.springframework.cloud:spring-cloud-starter-config'
            }
        }

        if (Objects.equals(project.name,"spring-cloud-config-server")){

            dependencies {
                implementation 'org.springframework.cloud:spring-cloud-config-server'
            }
        }

    }
    // ==============================================================================

    configurations {
        compileClasspath.resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                if (Objects.equals(details.getRequested().module.toString(),'com.google.guava:guava')) {
                    details.useVersion '29.0-jre'
                }
                if (Objects.equals(details.getRequested().module.toString(),'log4j:log4j')) {
                    details.useVersion '1.2.17'
                }
            }
        }
    }
}
